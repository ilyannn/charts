# ------------ Core options

# This URL must agree with the app's URL for OAuth to work
nextauthURL: http://localhost:3000

# By default, the postgres subchart will be installed and the connection value overridden.
# Disable the bundled subchart using postgresql.enabled if you want to use this setting.
databaseURL: "postgresql://postgres:postgres@localhost:5432/postgres"

# This URL is used for migrations
directURL: ""

# Several toggles for Langfuse functionality
toggles:
  disablePublicSignup: false
  experimentalFeatures: false
  telemetry: true

# Where the non-public Langfuse configuration is stored
secrets:
  postgres:
    # If set (default), random values are saved in the postgresql.auth.existingSecret secret
    # for all the missing keys (existing values for these keys are preserved).
    # If unset, you are expected to create the secret yourself before installing the chart.
    createIfMissing: true
    # If set, the secret will be annotated so that it is kept with `helm uninstall`
    # If unset, the secret will be deleted with `helm uninstall`
    # This has no effect unless createIfMissing is also true.
    # Warning: reinstalling the chart with this value unset will generate a new password, 
    # but Postgres will continue to use an old password since it's stored on the PVC.
    keepWhenUninstalled: true
  internal:
    # You can change the name to make several installations share the API keys.
    name: "{{ .Release.Name }}-internal-secret"
    # If set, the secret will be annotated so that it is kept with `helm uninstall`
    # If unset, the secret will be deleted with `helm uninstall`
    # Warning: reinstalling the chart with this value unset will generate a new salt thus
    # rendering old API keys unusable.
    keepWhenUninstalled: true
  # These secret's fields (in the ENV_VAR: value format) are added to the Langfuse config
  # You will need to manage those manually; they will not be touched by the chart.
  additional: [ ]


# ------------ Postgres subchart

postgresql:
  # Setting this to false will disable the bundled Postgres subchart.
  enabled: true

  auth:
    # You can set up the authentication in advance by creating this secret
    # If it's missing and postgresql.secret.create is true it will be created
    existingSecret: "{{ .Release.Name }}-postgres-secret"
    username: langfuse-user
    database: "{{ .Release.Name }}"

# ------------ Standard values generated by helm create

replicaCount: 1

image:
  repository: ghcr.io/langfuse/langfuse
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext:
  { }
# fsGroup: 2000

securityContext:
  { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }
